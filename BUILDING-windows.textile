*These steps will setup your development environment for Sonic Awe on Windows 7*

*1. Github*
Install git and send your github user name to reep.

*2. Prerequisites*
Please use 32bit libraries or you're on your own. The QT-librarie which we use is not compiled in 64bit so you'll have to take care of that problem yourself.

*2.1. CUDA*
Download and install <a href="http://www.nvidia.com/object/cuda_get.html">cuda toolkit (and if needed, cuda dev driver) from nvidia</a>. Note that QT is 32bit, so the 32bit versions has to be used here as well. Win7 uses Vista variants.
Make sure these enviroment variables are set:
CUDA_BIN_PATH = c:\CUDA\bin
CUDA_LIB_PATH = c:\CUDA\lib
CUDA_INC_PATH = c:\CUDA\include
Please note that the installer sometimes messes up and sets paths to bin64 and lib64, eventho the 32bit version is installed. So check this manually!

*2.2 QT Toolkit*
Download and install Nokia __Qt for Open Source C++ development on Windows (VS2008)__. You will not need to build it yourself. Get it <a href="http://qt.nokia.com/downloads/windows-cpp-vs2008">here</a>. Make sure the path to the QT bin directory is added to the system paths. (Something like: C:\Qt\2009.04\qt\bin, depends on your version)

*2.3 LibSndFile* - win32-libs-*.zip
This is an evil library ;) which for some reason comes with an installer. Download and install the library. To fit the previously used VS searchpath you should make a copy of the installed folder and place it at the same level as the "sonic"-folder. Get the 32bit binary release <a href="http://www.mega-nerd.com/libsndfile/">here</a>.

*2.4. Boost*
Install boost with this "installer":http://www.boostpro.com/download/boost_1_42_setup.exe 
Select __Multithread__ and __Multithread debug__ variant, and select the __Boost DateTime__ package and the __Boost Thread__ package for your version of visual studio. Make sure this envirment variable is set:
BOOST_PATH = C:\Program Files (x86)\boost\boost_1_42 (depending on your version, of course)

*2.5. stdint.h missing* - win32-libs-*.zip
Get from the "internets":http://msinttypes.googlecode.com/svn/trunk/stdint.h until Matthias sorts it. Place it path-to-sonic-repo/../std

*2.6. glew* - win32-libs-*.zip
Download glew "here":https://sourceforge.net/projects/glew/files/glew/1.5.2/glew-1.5.2-win32.zip/download and extract the contents into path-to-sonic-repo/../glew
Copy glew32.dll into your path.

*2.7. glut* - win32-libs-*.zip
Download glut "here":http://www.xmission.com/~nate/glut.html and extract the contents into path-to-sonic-repo/../glut
Copy glut32.dll into your path.

*2.8. portaudio* - win32-libs-*.zip
Portaudio libs have to be built. It in turn requires ASIO and DirectX SDK, and perhaps the Express Edition Library as well. (Not certain yet)
ASIO SDK (requries registration) "here":http://www.steinberg.net/en/company/3rd_party_developer/sdk_download_portal/asio_sdk.html
DirectX SDK (requires validation) "here":http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=2c7da5fb-ffbb-4af6-8c66-651cbd28ca15
MSVS Express Library "here":http://www.microsoft.com/express/Downloads/#2008-MSDN-Library

Build portaudio, and the c++ wrapper with the included project files.

first (read the README file - ASIO stuff need to be copied over)
\build\msvc

and then (straight forward)
\bindings\cpp\build\vc7_1

copy the lib files to path-to-sonic-repo/../portaudio . Rename them to portaudio.lib and portaudiocpp.lib respectively.
copy the \include folder there
copy \bindings\cpp\include\portaudiocpp into the include folder

Copy portaudio_x86.dll into your path.
---

*3. Things to remember*
*3.1 The misc VS project*
The misc VS project is not generated by QT at the moment so unless you're up for the task of fixing the "misc.pro"-file, do not use qmake to generate a new one. Please add any files new files to the VS project if you can.

*3.1 The sonicawe VS project*
The sonicawe VS project can be generated by qmake without very much hassle. The only problem is that the CUDA-files won't be included. This should be solvable in the "sonicawe.pro" but it sure is a bore. Please fix the "sonicawe.pro" if you can but otherwise you can just add the CUDA-files yourself, just don't forget the CUDA compile rules located in CUDA.rules in the "sonic"-folder.

*3.2 Optional - QT integration into Visual Studio*
Follow the link "here":http://qt.nokia.com/downloads/visual-studio-add-in to download, "here":http://qt.nokia.com/developer/faqs/what-is-the-visual-studio-add-in/view for a FAQ article regarding the plug-in, and "here":http://rajorshi.net/blog/2009/01/using-qt-with-msvc-express-2008/ for a tutorial on how to use it. Note that this doesn't work with the Express version!

*4. Packaging the application*
*4.1 Debug build*
To package a debug build of SonicAwe, copy the included libraries and the exe to the folder of your choice. Also include the VS runtime libraries msvcp90d.dll, msvcr90d.dll and the manifest file Microsoft.VC90.DebugCRT.manifest. These should be located in the folder "C:\program files\Microsoft Visual Studio 9.0\VC\redist\Debug_NonRedist\x86".
It should be a trivial task to put this behaviour into the project file but since paths may differ on different computers, this has not been done.

The following dlls should be included in the package:
<pre>audiere.dll
cudart.dll
cufft.dll
glew32.dll
glut32.dll
libsndfile-1.dll
msvcp90d.dll
msvcr90d.dll
QtCored4.dll
QtGuid4.dll
QtOpenGLd4.dll
portaudio_x86.dll
</pre>
Also don't forget to include
<pre>spectrogram.frag
spectrogram.vert</pre>

*4.2 Release build*
The application is currently not in a state stable enough to run in release mode but the process is similar to the previously described debug mode.